// Code generated by go-bindata.
// sources:
// assets/create.html
// assets/error.html
// assets/finish.html
// assets/home.html
// assets/login.html
// assets/script.js
// assets/style.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsCreateHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x4d\x73\xdb\x36\x10\xbd\xe7\x57\xec\xe0\xd0\x1c\x5a\x92\xe3\xc8\x6d\x3c\xa9\xa0\x8e\x1b\xdb\x8d\xea\xd6\xf6\x88\x4e\xa6\x3e\x75\x40\x62\x45\xc2\xc2\x07\x0b\x2c\x24\xb3\x99\xfc\xf7\x0e\x29\xd9\xa6\x18\x35\x33\xc9\x4d\x8b\xdd\xf7\xb8\xfb\xde\x02\x9a\xd6\x64\xf4\xec\x05\x00\xc0\xb4\x46\x21\xb7\x3f\xfb\xd0\x20\x09\x28\x6b\xe1\x03\x12\x67\x91\x96\xc9\x09\x1b\xa7\x6b\xa2\x26\xc1\x7f\xa2\x5a\x73\xf6\x57\xf2\xfe\x34\x79\xeb\x4c\x23\x48\x15\x1a\x19\x94\xce\x12\x5a\xe2\x6c\x7e\xce\x51\x56\xf8\x19\xda\x0a\x83\x9c\xad\x15\x6e\x1a\xe7\x69\x00\xd8\x28\x49\x35\x97\xb8\x56\x25\x26\x7d\xf0\x03\x28\xab\x48\x09\x9d\x84\x52\x68\xe4\x47\x43\x32\x52\xa4\x71\x96\x63\x08\xca\x59\x58\xb8\x68\x25\x79\xd5\x34\xe8\x21\x81\x3f\x85\x5f\xc5\x06\xbe\x83\x0b\x65\x55\xa8\xa7\xd9\xb6\xfa\x19\xad\x95\x5d\x81\x47\xcd\x59\xa0\x56\x63\xa8\x11\x89\x41\xed\x71\xc9\x59\x37\x5f\x78\x93\x65\x46\x3c\x94\xd2\xa6\x85\x73\x14\xc8\x8b\xa6\x0b\x4a\x67\xb2\xa7\x83\x6c\x92\x4e\xd2\xd7\x59\x19\xc2\xf3\x59\x6a\x94\x4d\xcb\x10\x18\x28\x4b\x58\x79\x45\x2d\x67\xa1\x16\x93\x93\xe3\xe4\xd7\x0f\x77\x4a\xe5\xf3\x0b\xbc\x3c\x92\xbf\x99\xdf\x17\xa7\xab\xb6\x8c\xef\x4e\xdf\x2d\xaa\xc9\xab\x6b\xf3\xbe\xdc\x6c\x5e\x3b\x3b\x59\xdc\xc9\xea\xf8\x83\xf8\xfe\xc6\xe4\xb7\xe1\xdf\xec\xf2\xa7\x93\x75\x21\xcf\xef\xeb\xe3\xc8\xa0\xf4\x2e\x04\xe7\x55\xa5\x2c\x67\xc2\x3a\xdb\x1a\x17\xc3\x4e\x96\x69\xf6\x6c\xe6\xb4\x70\xb2\x85\x7e\x36\xce\x8c\xf0\x95\xb2\x6f\xe0\xd5\x8f\xcd\xc3\xcf\x43\x0d\xa5\x5a\x43\xa9\x45\x08\x9c\x35\xa2\xc2\xa4\xc3\xa3\x1f\x54\x6c\x57\xe4\x68\xf6\x99\x9e\xf5\xd1\x80\x26\x93\x6a\x3d\x08\x9b\x7d\xfc\x6d\x8d\x90\x53\x94\xca\xc1\xa3\x5b\xd3\x40\xde\xd9\x6a\xf6\xf1\x63\xba\x3b\xba\x12\x06\x3f\x7d\x9a\x66\xbb\x04\xd4\x22\x40\x81\x68\xa1\xf4\x28\x08\x25\x6c\x14\xd5\x30\x3f\x3b\x00\x9d\x9f\x0d\x80\x29\xdc\xb9\x08\x46\xb4\x60\xdd\x06\x2a\xd7\xb9\xe0\x60\x81\xeb\x08\xc2\x4a\x30\xdb\x39\x5a\x17\x3d\x2c\x95\xc6\x14\xde\x6a\x55\xae\xe0\xe5\x76\xae\xc7\x06\x5f\xc2\xa6\x46\xdb\x95\x81\xf0\x08\x1e\x85\x6c\xd3\xc1\xbc\xcd\xff\x69\x68\x51\x8f\xd5\x1b\xe7\x93\xce\x99\x51\x51\x5f\x18\x8c\xd0\xfa\xb1\x94\xf0\x81\x12\x13\x09\x25\x9b\xe5\xe7\x79\x3e\xbf\xbe\x82\x3f\xe6\x57\x97\xd3\xac\x2f\x3b\x00\x1f\x7c\x67\x83\x7a\xdc\xc6\x53\x99\x18\x2d\x79\xe8\x9d\x49\x0b\x1d\xb1\x40\x61\xfa\x05\xbf\x77\xca\xa6\xdd\x1b\xf1\xcb\xfc\x8c\xef\x0b\xcd\x80\x84\xaf\xba\xb7\xe1\xef\x42\x0b\xbb\x62\x07\x3c\x14\x07\xba\xdb\x5f\x91\x43\x5b\x33\x0a\x97\xce\x1b\x10\x25\x29\x67\x39\xcb\x96\xbd\x3d\x0c\x0c\x52\xed\x24\x67\x37\xd7\xf9\xed\x17\x84\xee\xc0\x49\xe5\x5d\x6c\x0e\x09\xad\x6c\x13\x09\xa8\x6d\x90\xb3\x5a\x49\x89\x96\xed\x5e\xa5\xb0\x1b\x54\x32\x58\x0b\x1d\x91\xb3\xd1\xf4\x5f\xc5\xd6\x78\x77\x8f\x25\xed\xb3\xdd\xec\x0e\xbf\x9a\xad\x5b\xd7\xfc\x50\x7f\x17\x83\xc4\x37\xb1\xde\x1c\xea\xf3\x62\x90\xf8\x22\xeb\x4e\xf2\x82\x2c\x14\x64\x93\xc6\x2b\x23\x7c\xcb\x76\x5f\x0b\xb1\x30\x8a\x9e\x88\xf7\xaf\xd9\xd8\xc1\xf1\x46\x74\x36\x3e\x3e\x6d\xdd\xad\x99\xbd\x98\x66\xfd\x5f\xd7\x7f\x01\x00\x00\xff\xff\xbe\x58\xad\x0f\xc1\x06\x00\x00")

func assetsCreateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsCreateHtml,
		"assets/create.html",
	)
}

func assetsCreateHtml() (*asset, error) {
	bytes, err := assetsCreateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/create.html", size: 1729, mode: os.FileMode(511), modTime: time.Unix(1540915425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x4f\x6f\x13\x3d\x10\xc6\xef\xfd\x14\x96\xaf\xef\xbb\x6b\xa5\x09\x34\x2a\xeb\x48\x01\x02\x2d\x3d\x80\x12\x5a\xd1\xa3\x63\x4f\x77\x87\xfa\xcf\xe2\x99\xdd\x34\x54\xfd\xee\x28\x49\x45\x56\xb4\x17\xcb\x33\x9e\xdf\x23\x3d\x8f\xa7\x6a\x38\xf8\xd9\x89\x10\x42\x54\x0d\x18\x77\xb8\xee\xcb\x00\x6c\x84\x6d\x4c\x26\x60\x2d\x3b\xbe\x2b\xa6\xf2\xdf\xe7\x86\xb9\x2d\xe0\x57\x87\xbd\x96\x3f\x8a\xeb\x79\xf1\x21\x85\xd6\x30\xae\x3d\x48\x61\x53\x64\x88\xac\xe5\xe5\x42\x83\xab\xe1\x05\x1d\x4d\x00\x2d\x7b\x84\x4d\x9b\x32\x0f\x80\x0d\x3a\x6e\xb4\x83\x1e\x2d\x14\xfb\xe2\x7f\x81\x11\x19\x8d\x2f\xc8\x1a\x0f\x7a\x34\x14\x63\x64\x0f\xb3\x15\x10\x61\x8a\x62\x99\xba\xe8\x38\x63\xdb\x42\x16\x85\x58\xe4\x9c\x72\xa5\x0e\x33\x47\xc6\x63\xbc\x17\x19\xbc\x96\xc4\x5b\x0f\xd4\x00\xb0\x14\x4d\x86\x3b\x2d\x77\xae\xe8\x5c\xa9\x60\x1e\xac\x8b\xe5\x3a\x25\x26\xce\xa6\xdd\x15\x36\x05\xf5\xb7\xa1\xc6\xe5\xb8\x3c\x53\x96\xe8\xd8\x2b\x03\xc6\xd2\x12\x49\x81\x91\xa1\xce\xc8\x5b\x2d\xa9\x31\xe3\xe9\xa4\x78\x7f\x73\x8b\xb8\xba\xfc\x04\x57\x23\xf7\x39\x7c\x59\xce\xef\xb7\xb6\xbb\x98\x5f\x2c\xeb\xf1\xe9\xd7\x70\x6d\x37\x9b\xb3\x14\xc7\xcb\x5b\x57\x4f\x6e\xcc\x7f\xdf\xc2\xea\x3b\xfd\x56\x57\x6f\xa7\xfd\xda\x2d\x7e\x36\x93\x4e\x0a\x9b\x13\x51\xca\x58\x63\xd4\xd2\xc4\x14\xb7\x21\x75\xf4\x1c\x46\xa5\x8e\x5f\x58\xad\x93\xdb\x8a\xbd\x37\x2d\x83\xc9\x35\xc6\x73\x71\xfa\xa6\x7d\x78\x37\x4c\xce\x61\x2f\xac\x37\x44\x5a\xb6\xa6\x86\x62\xc7\x43\x1e\x4c\x1c\x16\x63\x34\x7b\x4e\xb1\x19\x0d\x60\xe5\xb0\x7f\x5d\xcb\x78\xc8\x2c\xf6\x67\xe1\x4c\xac\x5f\x48\x3e\x3e\x96\x1f\x81\x6c\xc6\x96\x31\xc5\xa7\xa7\xd7\x44\x2b\xb5\xb3\x30\x3b\xa9\xd4\x7e\x47\xff\x04\x00\x00\xff\xff\xbe\x0d\x5a\x90\xaa\x02\x00\x00")

func assetsErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsErrorHtml,
		"assets/error.html",
	)
}

func assetsErrorHtml() (*asset, error) {
	bytes, err := assetsErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/error.html", size: 682, mode: os.FileMode(511), modTime: time.Unix(1540915425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsFinishHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x4d\x6f\x1b\x37\x10\xbd\xe7\x57\x0c\x78\x6d\x56\x0b\x47\x6e\x63\xa4\xa2\x00\xb5\x75\x63\xd7\x41\x13\x48\x49\x50\x9f\x8a\x59\x72\xb4\x3b\x16\x3f\xb6\xe4\xac\x64\x35\xc8\x7f\x2f\x56\xb6\xa4\xad\xa2\xf6\xc6\x21\xdf\x9b\xe1\xbc\x37\xe4\xa4\x11\xef\xa6\x2f\x00\x00\x26\x0d\xa1\x7d\x5a\xee\x42\x4f\x82\x60\x1a\x4c\x99\x44\xab\x4e\x96\xc5\x95\x3a\x3d\x6e\x44\xda\x82\xfe\xea\x78\xad\xd5\x1f\xc5\xa7\x59\xf1\x73\xf4\x2d\x0a\x57\x8e\x14\x98\x18\x84\x82\x68\x75\x7b\xad\xc9\xd6\xf4\x0d\x3b\xa0\x27\xad\xd6\x4c\x9b\x36\x26\x19\x10\x36\x6c\xa5\xd1\x96\xd6\x6c\xa8\xd8\x05\x2f\x81\x03\x0b\xa3\x2b\xb2\x41\x47\xfa\x62\x98\x4c\x58\x1c\x4d\x17\x94\x33\xc7\x00\xf3\xd8\x05\x2b\x89\xdb\x96\x12\x14\xd0\xdf\xc8\x91\xd0\xa4\x7c\x82\x1d\x69\x8e\xc3\x0a\x12\x39\xad\xb2\x6c\x1d\xe5\x86\x48\x14\x34\x89\x96\x5a\xf5\x8d\xe5\x37\x65\xe9\xf1\xd1\xd8\x30\xaa\x62\x94\x2c\x09\xdb\x3e\x30\xd1\x97\x87\x8d\x72\x3c\x1a\x8f\x5e\x97\x26\xe7\xe3\xde\xc8\x73\x18\x99\x9c\x15\x70\x10\xaa\x13\xcb\x56\xab\xdc\xe0\xf8\xea\xb2\xf8\xe9\xf3\x3d\xf3\xe2\xf6\x57\xba\xbb\xb0\x6f\xfd\x6f\xf3\xd9\x6a\x6b\xba\x9b\xd9\xcd\xbc\x1e\xbf\x7a\xef\x3f\x99\xcd\xe6\x75\x0c\xe3\xf9\xbd\xad\x2f\x3f\xe3\x77\x1f\xfc\xe2\x63\xfe\xbb\xbc\xfb\xe1\x6a\x5d\xd9\xeb\x87\xe6\xb2\x53\x60\x52\xcc\x39\x26\xae\x39\x68\x85\x21\x86\xad\x8f\x5d\x7e\xd6\x63\x52\x1e\x5d\x9c\x54\xd1\x6e\x61\xd7\x9b\x56\x1e\x53\xcd\xe1\x0d\xbc\xfa\xbe\x7d\xfc\x71\x28\x9e\xe5\x35\x18\x87\x39\x6b\xd5\x62\x4d\x45\xcf\xa7\x34\x40\x3c\xcd\xc6\xc5\xf4\x28\x64\x73\x31\xe0\x97\x96\xd7\x83\xb0\x3d\xae\xef\x63\x97\x60\x21\x9d\xe5\x08\x7b\x73\x38\x43\x88\x1b\x58\x72\xe0\xdc\x90\x05\x0c\x16\xa4\x21\x58\xb2\x23\x68\x30\x43\x45\x14\xc0\x34\x64\x56\x64\xa1\x42\xb3\xea\x35\x8c\x3b\xcc\x87\x14\x1f\xc8\xc8\x08\x66\x2e\xc7\x97\x80\xf0\x10\xab\x01\x27\x11\x0a\x59\x90\x08\x4b\x87\x22\x14\x0e\x89\x47\x30\xb3\x96\x85\x63\x40\xe7\xb6\x3d\x33\x37\x98\x08\x2b\x47\xb0\x1b\x82\x43\x92\x9a\x02\xa5\x7d\x9a\x03\x7d\xd0\x6c\xfb\x5f\xca\x05\x72\xa7\x9a\x9d\x9e\x17\xbd\x1f\x27\xa0\x1d\x30\x7b\x74\x6e\x0f\x15\x7a\x94\xc2\x77\x42\x56\x4d\x17\x37\xb3\xf9\xf5\x2f\xf0\xee\xf6\xf7\xbb\x49\xb9\x43\x9d\x61\x0f\xca\x6c\xc8\x9d\xde\xe2\x00\xc3\xe7\xc9\xfe\xf2\x65\xf4\x2c\xe4\x3b\x0e\xab\xaf\x5f\x15\x08\xa6\xba\x7f\xe2\x7f\x56\x0e\xc3\x4a\x4d\x4f\x11\x93\x12\xcf\x94\xfd\xb7\xef\xe7\x46\xe1\x24\x5c\xc6\xe4\x01\x4d\x6f\x83\x56\xa5\x8b\x35\x07\x05\x9e\xa4\x89\x56\xab\xb7\xd7\x1f\xff\x47\xbe\x9e\x5a\xd4\x29\x76\xed\x39\xf9\x38\xb4\x9d\xec\xa1\x95\x04\xa8\x24\x14\x6d\x62\x8f\x69\xab\x40\xb6\x2d\x69\x95\xbb\xca\xb3\x28\x58\xa3\xeb\x48\xab\x85\x60\x12\x78\xbf\xfe\x76\xd0\x4f\x7b\xe8\x4b\xef\x9f\x56\xef\xdf\xf4\xc5\xa4\xdc\xfd\x99\xff\x04\x00\x00\xff\xff\x2b\x8e\xf2\x37\x3a\x05\x00\x00")

func assetsFinishHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsFinishHtml,
		"assets/finish.html",
	)
}

func assetsFinishHtml() (*asset, error) {
	bytes, err := assetsFinishHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/finish.html", size: 1338, mode: os.FileMode(511), modTime: time.Unix(1540915425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsHomeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x5f\x6f\xdb\x36\x10\x7f\xef\xa7\x38\xf0\x61\x2f\x9b\x44\x38\xc9\xd6\xa0\x95\x0c\xa4\x7f\xb2\x66\x05\xb6\x20\x59\x8a\xe5\x91\x26\xcf\x12\x53\x8a\x64\xc9\x93\x1d\xd7\xc8\x77\x1f\x44\xc9\xb3\xec\xd8\xe8\x80\xd6\x0f\x06\x8f\xbc\xfb\xdd\xdd\xef\x8e\x47\x15\x35\x35\x66\xfa\x02\x00\xa0\xa8\x51\xa8\x7e\x99\xc4\x06\x49\x80\xac\x45\x88\x48\x25\x6b\x69\x9e\x9d\xb3\xfd\xe3\x9a\xc8\x67\xf8\xa5\xd5\x8b\x92\xfd\x93\xdd\x5d\x64\x6f\x5d\xe3\x05\xe9\x99\x41\x06\xd2\x59\x42\x4b\x25\xbb\x7a\x5f\xa2\xaa\xf0\x99\xb5\x15\x0d\x96\x6c\xa1\x71\xe9\x5d\xa0\x91\xc1\x52\x2b\xaa\x4b\x85\x0b\x2d\x31\x4b\xc2\x2f\xa0\xad\x26\x2d\x4c\x16\xa5\x30\x58\x4e\xc6\x60\xa4\xc9\xe0\xf4\x16\x63\xd4\xce\xc2\x8d\x6b\xad\xa2\xa0\xbd\xc7\x00\x19\xbc\x0d\x28\x08\x61\x38\x2d\x78\xaf\xbc\x35\x36\xda\x7e\x86\x80\xa6\x64\x91\x56\x06\x63\x8d\x48\x0c\xea\x80\xf3\x92\x75\xe9\xc5\x57\x9c\x37\xe2\x51\x2a\x9b\xcf\x9c\xa3\x48\x41\xf8\x4e\x90\xae\xe1\xff\x6d\xf0\xd3\xfc\x34\x7f\xc9\x65\x8c\xdb\xbd\xbc\xd1\x36\x97\x31\x32\xd0\x96\xb0\x0a\x9a\x56\x25\x8b\xb5\x38\x3d\x3f\xcb\xde\x7c\xba\xd7\xfa\xf6\xea\x12\x3f\x4e\xd4\xef\xcd\x1f\x37\x17\x9f\x57\xb2\xfd\x70\xf1\xe1\xa6\x3a\x3d\xf9\xab\xb9\x93\xcb\xe5\x4b\x67\x4f\x6f\xee\x55\x75\xf6\x49\xfc\x7c\xdd\xdc\xfe\x1d\xbf\xf2\x8f\xbf\x9d\x2f\x66\xea\xfd\x43\x7d\xd6\x32\x90\xc1\xc5\xe8\x82\xae\xb4\x2d\x99\xb0\xce\xae\x1a\xd7\x46\xf6\x3f\x13\x4b\x3b\x29\xb8\xa1\xf6\x7c\x5b\xfc\x62\xe6\xd4\x0a\x92\x46\xc9\x1a\x11\x2a\x6d\x5f\xc1\xc9\xaf\xfe\xf1\xf5\x18\x5d\xe9\x05\x48\x23\x62\x2c\x99\x17\x15\x66\x9d\x3d\x86\x91\x46\xdf\x52\x93\xe9\x86\x7f\x6a\x95\x76\xdb\x32\xd4\x93\x11\x18\x57\x7a\x31\x12\xfd\x76\x7d\xef\x5a\x10\x01\x41\xb4\x54\xbb\xa0\xbf\xa2\x02\x11\x61\xbd\xce\xef\x22\x86\xab\x77\x4f\x4f\x23\x90\x91\x59\x31\x77\xa1\x01\x21\x49\x3b\x5b\x32\x2e\x53\x0c\x0c\x1a\xa4\xda\xa9\x92\x79\x17\x89\x01\x5a\x49\x2b\xdf\x25\xd9\x1a\xd2\x5e\x04\xe2\x9d\x59\xa6\x04\x89\xfd\x44\x46\xe9\x26\x9d\x2a\xb8\xd6\xef\x29\xf5\xac\x8b\x19\x1a\x98\xbb\x50\xb2\x88\x06\x25\x5d\x07\xf7\x80\x92\xd8\xf4\x36\x89\x1b\x22\x86\xed\x82\x27\x83\x03\x40\xbd\xf5\x8e\xd3\xee\x7e\x04\x67\xd8\x70\x71\xfc\x80\x0c\x5a\xed\x3b\x83\xd0\x5d\xca\x80\xea\x39\x70\xf7\x5b\xaf\x83\xb0\x15\x42\x3e\xe8\xc7\x11\x8f\xcf\x02\x71\xbe\x63\x11\x16\xc2\xb4\x58\xb2\xf5\x3a\xef\x68\x67\xd3\xf5\x3a\xff\x53\x34\xf8\xf4\x54\xf0\x5e\xe3\x98\x2b\xb4\xea\x00\x7c\xc1\xfb\x88\xf7\x78\xde\xed\x84\xef\xa0\x3e\xb5\x59\x17\x20\x9b\x76\xff\xdb\xc6\x3b\xc6\xb7\xb6\xbe\x3d\x42\x77\xdf\x25\x84\x8f\xb4\xa1\x7e\xc0\xdf\x50\xbf\x75\x06\xde\x08\x89\xb5\x33\x0a\x43\xc9\x36\x23\xa9\x3f\x3a\x5c\x93\x1f\x9c\xf2\xa5\x36\xc8\xa6\x6f\x82\x5b\x46\xec\x0e\x80\x6a\x84\xeb\x77\x97\x30\xd7\x06\x81\x1c\xb4\xde\x38\xa1\xba\x99\xe4\xd2\x99\xc5\xe5\xb7\xc9\x19\x05\x94\x78\x1a\x22\x1a\xa7\xdf\x3b\x3e\xd8\x03\x43\x98\xcf\x01\xb2\x19\xd9\x23\x36\xc9\x2e\x7a\x61\x37\x66\x33\xb2\x30\x23\x9b\xa5\x3c\xba\x85\xc2\xb9\x68\x0d\x6d\x92\xfd\xa9\x46\x63\xb4\x7f\x0d\x47\xe1\x46\x65\xde\xa9\x62\x8a\x7c\x28\xf2\x3c\xad\x85\x94\xe8\xa9\x64\xb9\x57\xf3\x6f\xdd\xa5\xbe\x86\x5d\xa4\x47\x92\x3f\x46\xea\x28\x9c\x71\x83\x1d\xec\xc0\x80\x42\x39\x6b\x56\x07\x4a\x73\xa0\x7d\xbe\xa7\xa3\x76\xae\xc1\x86\x73\x1f\x74\x23\xc2\x6a\x43\x52\x6c\x67\x8d\x26\xb6\x19\x09\xbb\x2f\xec\xfe\xe4\xdc\x9b\xed\x69\xc4\x8e\xe4\x28\x83\xf6\x04\x31\xc8\xed\x73\x2b\x1e\xc4\x63\x5e\x39\x57\x19\x14\x5e\xc7\xf4\xd4\x76\x7b\xdc\xe8\x59\xe4\x0f\x5f\x5a\x0c\x2b\x3e\xc9\x27\x27\xf9\xd9\x20\xa5\xb7\xf6\x21\xb2\x69\xc1\x7b\xc0\x23\x1e\xfa\xf5\x01\xcd\x82\x77\xaf\xde\xf4\x45\xc1\xd3\x07\xd1\xbf\x01\x00\x00\xff\xff\xb4\xb8\xe1\xbc\x17\x09\x00\x00")

func assetsHomeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsHomeHtml,
		"assets/home.html",
	)
}

func assetsHomeHtml() (*asset, error) {
	bytes, err := assetsHomeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/home.html", size: 2327, mode: os.FileMode(511), modTime: time.Unix(1540915425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsLoginHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x53\x5b\x4f\xdc\x3c\x14\x7c\xe7\x57\x1c\xf9\xf5\xfb\xb2\xd1\xb2\xb4\x20\x1a\xaf\xb4\x20\x28\x94\x07\xaa\xe5\xa2\xf2\xe8\xd8\x87\xf8\x14\x5f\x52\xfb\x24\x4b\xf8\xf5\x55\x96\xcb\x46\xf4\xcd\xe3\xcc\x8c\x33\x73\xec\xca\xb2\x77\xcb\x3d\x00\x80\xca\xa2\x32\xaf\xcb\x2d\xf4\xc8\x0a\xb4\x55\x29\x23\x4b\xd1\xf1\x63\x71\x24\x3e\x7f\xb6\xcc\x6d\x81\x7f\x3a\xea\xa5\xf8\x55\xdc\xad\x8a\xd3\xe8\x5b\xc5\x54\x3b\x14\xa0\x63\x60\x0c\x2c\xc5\xe5\x99\x44\xd3\xe0\x3f\xea\xa0\x3c\x4a\xd1\x13\x6e\xda\x98\x78\x22\xd8\x90\x61\x2b\x0d\xf6\xa4\xb1\xd8\x82\xff\x81\x02\x31\x29\x57\x64\xad\x1c\xca\xf9\xd4\x8c\x89\x1d\x2e\x6f\x30\x67\x8a\x01\xd6\xb1\x0b\x86\x13\xb5\x2d\x26\x28\x60\xd5\xb1\x8d\x89\x5e\xb0\x2a\x5f\x79\x3b\x9d\xa3\xf0\x04\x09\x9d\x14\x99\x07\x87\xd9\x22\xb2\x00\x9b\xf0\x51\x8a\x31\x59\x3e\x2e\x4b\xaf\x9e\xb5\x09\xb3\x3a\x46\xce\x9c\x54\x3b\x02\x1d\x7d\xf9\xb1\x51\x2e\x66\x8b\xd9\x61\xa9\x73\xde\xed\xcd\x3c\x85\x99\xce\x59\x00\x05\xc6\x26\x11\x0f\x52\x64\xab\x16\x47\x07\xc5\xc9\xfd\x03\xd1\xcd\xe5\x39\x5e\xcd\xcd\x77\xff\x63\xbd\x7a\x1a\x74\x77\xb1\xba\x58\x37\x8b\xfd\x6b\x7f\xa7\x37\x9b\xc3\x18\x16\xeb\x07\xd3\x1c\xdc\xab\xff\x7e\xfa\x9b\xdb\xfc\x52\x5e\x7d\x3d\xea\x6b\x73\xf6\xdb\x1e\x74\x02\x74\x8a\x39\xc7\x44\x0d\x05\x29\x54\x88\x61\xf0\xb1\xcb\x6f\x85\x54\xe5\x6e\x8c\x55\x1d\xcd\x00\xdb\x6c\x52\x78\x95\x1a\x0a\xc7\xb0\xff\xa5\x7d\xfe\x36\x6d\xcf\x50\x0f\xda\xa9\x9c\xa5\x68\x55\x83\xc5\xa8\xc7\x34\x61\xbc\x5e\x8e\xf9\x72\xd2\xa4\x9d\x4f\x0c\x4a\x43\xfd\x04\xb6\xbb\xf5\xa9\x23\xfd\x04\xea\x5d\x07\x1c\xdf\xc6\xc8\x08\x6c\x11\x6e\x6d\x42\x2c\x1c\x36\x0d\x1a\xb8\x1e\xfd\xe1\xdc\xc5\x0d\x6c\x88\xed\x96\x70\xe2\x3a\xac\x51\xf9\x0f\x0f\xc5\xe3\x88\x33\xa6\xf1\x6a\xcc\x26\xff\x30\x39\xb5\x7a\x8c\xc9\x83\xd2\x23\x55\x8a\x38\x4a\x3f\xa7\xa1\xd0\x76\xfc\x9e\xba\xe6\x00\x35\x87\xa2\x4d\xe4\x55\x1a\x04\xf0\xd0\xa2\x14\xb9\xab\x3d\xb1\x80\x5e\xb9\x0e\xa5\xf8\x48\x3f\xed\xae\x1c\x8f\x7a\x2f\x7e\x6c\x7b\xb9\x57\x95\xdb\x27\xf5\x37\x00\x00\xff\xff\x84\x04\xc3\xe7\x59\x03\x00\x00")

func assetsLoginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsLoginHtml,
		"assets/login.html",
	)
}

func assetsLoginHtml() (*asset, error) {
	bytes, err := assetsLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/login.html", size: 857, mode: os.FileMode(511), modTime: time.Unix(1540915425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsScriptJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\x6f\xe3\x20\x10\x85\xcf\xf0\x2b\xe6\x10\x69\x60\x97\xc5\x9b\xab\xad\x6c\x6e\xfb\x27\x9a\x1e\xa8\x3d\x26\x48\x04\x5b\x18\x47\xad\xaa\xfc\xf7\xca\x90\xc6\x69\x1b\x9f\xcc\x9b\xe1\xbd\xc7\xb7\x11\xdd\xd0\xce\x27\x0a\x49\xea\x21\x08\x6c\x8f\x26\x58\x42\x05\x58\xf7\xce\x2f\x3f\xfd\x1c\xda\xe4\x86\x20\x24\xbc\x73\x00\x80\xb3\x89\xe0\xc2\x38\x27\xd8\xc1\x46\xa4\xa3\x9b\xa4\xca\x83\xe5\x0b\xf3\xe9\xbf\xf3\x34\xc1\xae\xec\x68\x4b\x49\xfc\x95\xba\xcf\xe2\xfe\x81\xa8\x3d\x05\x9b\x8e\x50\xc3\x76\xb5\xf1\xe6\x85\xfc\xcd\xe3\x6c\xbc\x90\x3a\xd2\xe8\x4d\x4b\xa2\x3a\x1c\x2a\xab\x00\x2b\xbc\xd3\xf4\xaf\x43\x55\x29\x40\x94\x4d\x36\x29\x17\x53\x74\xd6\x52\x14\x98\x93\xc8\x53\x9b\x50\xc1\xd3\x67\x49\x55\x72\x9e\x65\xc3\x2f\xb2\xe1\xfc\x1e\x46\x24\xd3\xbd\x89\x9f\xaf\xdf\x88\x2b\x99\xc2\xeb\x8b\xf1\x6d\x99\xce\x14\x92\x82\x6f\x39\x8b\x05\x63\x0f\xf0\xe9\xd1\x44\x0a\x69\x12\xa8\xf3\xe4\x8f\x8d\xc3\x3c\xe2\x02\x28\x74\x02\xeb\x44\xaf\x09\xa5\xe2\x8c\xf9\xc1\xc2\x6e\x85\xfc\x0f\xb6\xb0\x5f\x8f\xbf\x01\xa1\x80\x2e\x95\xa8\x43\xa8\x4b\x76\xc3\x39\x63\xae\x07\x51\xc0\x14\xe6\xa5\x10\x5b\x21\xfb\xc1\xca\x86\x33\x76\x01\xf2\x13\x5d\xa7\x3d\x64\x1d\x8c\xa7\x98\xd6\x95\x4c\xe3\x52\xd0\x7d\x04\x00\x00\xff\xff\xa1\x5c\xee\xd3\x46\x02\x00\x00")

func assetsScriptJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsScriptJs,
		"assets/script.js",
	)
}

func assetsScriptJs() (*asset, error) {
	bytes, err := assetsScriptJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/script.js", size: 582, mode: os.FileMode(511), modTime: time.Unix(1540915425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsStyleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xc1\x6e\x83\x30\x10\x44\xef\x7c\xc5\x5e\x2a\xb5\x07\x2a\x7a\x35\xca\x97\x54\x3d\x18\x58\xf0\x2a\xdb\x5d\xcb\xac\x43\x68\x95\x7f\xaf\x08\x6e\x38\xe4\xe6\x79\xda\x19\xcf\xbc\x77\x26\xf5\x48\x8c\xf0\x5b\x01\x00\x44\x9d\xc9\x48\xc5\x41\x42\xf6\x46\x17\x6c\xef\x5c\x2f\x98\x46\xd6\xc5\x41\xa0\x61\x40\x69\xab\x5b\x75\x78\x49\x62\xb6\x4f\x5b\x23\x9e\x36\xfd\xf5\x14\xe6\xbb\x59\x39\x5b\x09\x33\x8d\x0e\x9a\xfd\x9d\x68\x0a\xf6\x50\xdf\x24\xf5\x42\x83\x05\x07\x1f\x4d\xf3\x72\xc0\x80\xfb\xdd\x41\x47\x15\xab\x67\xfa\xc1\x3b\x8c\xd7\x12\x8d\x57\xab\x3d\xd3\xb4\x2d\xd8\x2c\xe5\x98\xd8\x30\x39\xf0\x1c\x83\x7f\xd5\xe8\x7b\xb2\xf5\xd4\xbc\x95\x71\xbb\x7e\xb4\xd0\x6c\x4c\x82\x0e\x44\xa5\x54\xee\x7c\x7f\x9e\x92\x66\x19\x1c\x2c\x81\xfe\x97\xf4\x39\xcd\x9a\x1c\x90\x04\x4c\x54\x3e\x1b\x68\x8e\xec\x57\x07\x1d\x6b\x7f\x6e\xab\xdb\x5f\x00\x00\x00\xff\xff\x46\x41\xbd\x56\x65\x01\x00\x00")

func assetsStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsStyleCss,
		"assets/style.css",
	)
}

func assetsStyleCss() (*asset, error) {
	bytes, err := assetsStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/style.css", size: 357, mode: os.FileMode(511), modTime: time.Unix(1540915425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/create.html": assetsCreateHtml,
	"assets/error.html": assetsErrorHtml,
	"assets/finish.html": assetsFinishHtml,
	"assets/home.html": assetsHomeHtml,
	"assets/login.html": assetsLoginHtml,
	"assets/script.js": assetsScriptJs,
	"assets/style.css": assetsStyleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"create.html": &bintree{assetsCreateHtml, map[string]*bintree{}},
		"error.html": &bintree{assetsErrorHtml, map[string]*bintree{}},
		"finish.html": &bintree{assetsFinishHtml, map[string]*bintree{}},
		"home.html": &bintree{assetsHomeHtml, map[string]*bintree{}},
		"login.html": &bintree{assetsLoginHtml, map[string]*bintree{}},
		"script.js": &bintree{assetsScriptJs, map[string]*bintree{}},
		"style.css": &bintree{assetsStyleCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

